//
//  MWCentralManager.m
//  ELDManager
//
//  Created by Ram Singh on 16/12/16.
//  Copyright Â© 2016 Faberwork. All rights reserved.
//

#import "MWCentralManager.h"
#import "MWELDTag.h"
#import "YMSCBStoredPeripherals.h"
#include "TIELDTag.h"

#define CALLBACK_EXAMPLE 1

static MWCentralManager *sharedCentralManager;

@implementation MWCentralManager

+ (MWCentralManager *)initSharedServiceWithDelegate:(id)delegate {
if (sharedCentralManager == nil) {
dispatch_queue_t queue = dispatch_queue_create("com.mobilewarrior.eld", 0);

NSArray *nameList = @[];
sharedCentralManager = [[super allocWithZone:NULL] initWithKnownPeripheralNames:nameList
queue:queue
useStoredPeripherals:YES
delegate:delegate];
}
return sharedCentralManager;

}


+ (MWCentralManager *)sharedService {
if (sharedCentralManager == nil) {
NSLog(@"ERROR: must call initSharedServiceWithDelegate: first.");
}
return sharedCentralManager;
}


- (void)startScan {
/*
Setting CBCentralManagerScanOptionAllowDuplicatesKey to YES will allow for repeated updates of the RSSI via advertising.
*/

NSDictionary *options = @{ CBCentralManagerScanOptionAllowDuplicatesKey: @YES };
// NOTE: TI SensorTag firmware does not included services in advertisementData.
// This prevents usage of serviceUUIDs array to filter on.

/*
Note that in this implementation, handleFoundPeripheral: is implemented so that it can be used via block callback or as a
delagate handler method. This is an implementation specific decision to handle discovered and retrieved peripherals identically.

This may not always be the case, where for example information from advertisementData and the RSSI are to be factored in.
*/

#ifdef CALLBACK_EXAMPLE
__weak MWCentralManager *this = self;
[self scanForPeripheralsWithServices:nil
options:options
withBlock:^(CBPeripheral *peripheral, NSDictionary *advertisementData, NSNumber *RSSI, NSError *error) {
if (error) {
NSLog(@"Something bad happened with scanForPeripheralWithServices:options:withBlock:");
return;
}
YMSCBPeripheral *yp = [self findPeripheral:peripheral];
if (nil == yp) {
NSLog(@"DISCOVERED: %@, %@, %@, %@ db", peripheral, peripheral.name,advertisementData, RSSI);
}
[this handleFoundPeripheral:peripheral];
}];

#else
[self scanForPeripheralsWithServices:nil options:options];
#endif

}

- (void)handleFoundPeripheral:(CBPeripheral *)peripheral {
YMSCBPeripheral *yp = [self findPeripheral:peripheral];

if (yp == nil) {
MWELDTag *sensorTag = [[MWELDTag alloc] initWithPeripheral:peripheral
central:self
baseHi:kSensorTag_BASE_ADDRESS_HI
baseLo:kSensorTag_BASE_ADDRESS_LO];

[self addPeripheral:sensorTag];
/*BOOL isUnknownPeripheral = YES;
for (NSString *pname in self.knownPeripheralNames) {
if ([pname isEqualToString:peripheral.name]) {
MWELDTag *sensorTag = [[MWELDTag alloc] initWithPeripheral:peripheral
central:self
baseHi:kSensorTag_BASE_ADDRESS_HI
baseLo:kSensorTag_BASE_ADDRESS_LO];

[self addPeripheral:sensorTag];
isUnknownPeripheral = NO;
break;
}
}

if (isUnknownPeripheral) {
//TODO: Handle unknown peripheral
yp = [[YMSCBPeripheral alloc] initWithPeripheral:peripheral central:self baseHi:0 baseLo:0];
[self addPeripheral:yp];
}*/
}

}


- (void)managerPoweredOnHandler {
// TODO: Determine if peripheral retrieval works on stock Macs with BLE support.
/*
Using iMac with Cirago BLE USB adapter, retreival with return a CBPeripheral instance without properties
correctly populated such as name. This behavior is not exhibited when running on iOS.
*/

if (self.useStoredPeripherals) {
#if TARGET_OS_IPHONE
NSArray *identifiers = [YMSCBStoredPeripherals genIdentifiers];
[self retrievePeripheralsWithIdentifiers:identifiers];
#endif
}
}

@end
